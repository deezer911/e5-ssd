import {DocumentNode, visit} from 'graphql'
import {filter, uniq} from 'lodash'
import * as fs from 'fs'
import * as path from 'path'
import * as yaml from 'yaml'

const STEPZEN_DEFAULTS = [
  'fedex_default',
  'holidayapi_default',
  'ipapi_default',
  'owm_default',
  'ups_default',
]

export default (ast: DocumentNode, source: string) => {
  let configs: any = []

  visit(ast, {
    Argument(node: any) {
      const name = node.name?.value
      const value = node.value?.value

      if (name === 'configuration') {
        configs = configs.concat(value)
      }
    },
  })

  configs = uniq(configs)
  configs = filter(configs, config => !STEPZEN_DEFAULTS.includes(config))

  if (configs.length > 0) {
    const sourceConfig = path.join(source, 'config.yaml')

    if (!fs.existsSync(sourceConfig)) {
      throw new Error('No config.yaml found')
    }

    const content = fs.readFileSync(sourceConfig, 'utf8')
    const asYaml = yaml.parse(content)

    for (const config of configs) {
      const found = asYaml?.configurationset?.find((c: any) => {
        return c?.configuration?.name === config
      })

      if (!found) {
        throw new Error(`Could not find configuration item for "${config}"`)
      }
    }
  }

  return true
}
