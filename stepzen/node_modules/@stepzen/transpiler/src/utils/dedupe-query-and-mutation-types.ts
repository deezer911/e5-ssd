import {DocumentNode, parse, print, visit} from 'graphql'

import {cloneDeep} from '../utils/graphql-helpers'

export default (schema: string): string => {
  let ast: DocumentNode = parse(schema)

  let queries: any = []
  let mutations: any = []

  // Loop through the AST and find Query and Mutation types.
  // Store their fields.
  // Return null to remove it from the tree
  ast = visit(ast, {
    ObjectTypeDefinition: {
      enter(node) {
        if (node.name.kind === 'Name' && node.name.value === 'Query') {
          queries = queries.concat(node.fields)
          return null
        }
        if (node.name.kind === 'Name' && node.name.value === 'Mutation') {
          mutations = mutations.concat(node.fields)
          return null
        }
      },
    },
  })

  // This is the template for the new Query type
  const queryTemplate = {
    kind: 'ObjectTypeDefinition',
    description: undefined,
    name: {kind: 'Name', value: 'Query'},
    interfaces: [],
    directives: [],
    fields: [],
  }

  // This is the template for the new Mutation type
  const mutationTemplate = {
    kind: 'ObjectTypeDefinition',
    description: undefined,
    name: {kind: 'Name', value: 'Mutation'},
    interfaces: [],
    directives: [],
    fields: [],
  }

  // If there are queries, add a single Query type
  // with all the concatenated queries
  if (queries.length > 0) {
    const mutated: any = cloneDeep(ast)
    const query = {
      ...queryTemplate,
      fields: queries,
    }
    mutated.definitions.push(query)
    ast = mutated
  }

  // If there are mutations, add a single Query type
  // with all the concatenated mutations
  if (mutations.length > 0) {
    const mutated: any = cloneDeep(ast)
    const query = {
      ...mutationTemplate,
      fields: mutations,
    }
    mutated.definitions.push(query)
    ast = mutated
  }

  return print(ast)
}
