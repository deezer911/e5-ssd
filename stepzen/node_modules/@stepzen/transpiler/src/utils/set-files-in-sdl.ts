import * as fs from 'fs'
import * as glob from 'glob'
import {parse, visit} from 'graphql'
import * as path from 'path'

import {cloneDeep} from './graphql-helpers'
import print from '../actions/print'

export default (source: string) => {
  const files = glob
    .sync('**/*.graphql', {cwd: source})
    .filter(file => file !== 'index.graphql')

  const output = path.join(source, 'index.graphql')

  const index = fs.readFileSync(output, 'utf8')

  let ast = parse(index)
  ast = visit(ast, {
    Directive(node) {
      if (node.name.value === 'sdl') {
        const mutated: any = cloneDeep(node)

        mutated.arguments = mutated.arguments.map((arg: any) => {
          if (arg.name.value === 'files') {
            arg.value.values = files.map(file => ({
              kind: 'StringValue',
              value: file,
            }))
          }
          return arg
        })

        return mutated
      }
    },
  })

  fs.writeFileSync(output, print(ast))
}
