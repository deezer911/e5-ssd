import {DocumentNode, visit} from 'graphql'

import {cloneDeep} from '../utils/graphql-helpers'

export default (ast: DocumentNode): DocumentNode => {
  let queries: any = []
  let mutations: any = []

  // Loop through the AST and find Query and Mutation types.
  ast = visit(ast, {
    ObjectTypeDefinition: {
      enter(node) {
        if (node.name.kind === 'Name' && node.name.value === 'Query') {
          queries = queries.concat(node.fields)
        }
        if (node.name.kind === 'Name' && node.name.value === 'Mutation') {
          mutations = mutations.concat(node.fields)
        }
      },
    },
  })

  // If there are no queries, add a single empty Query type
  if (queries.length === 0) {
    const mutated: any = cloneDeep(ast)
    mutated.definitions.push({
      kind: 'ObjectTypeDefinition',
      description: undefined,
      name: {kind: 'Name', value: 'Query'},
      interfaces: [],
      directives: [],
      fields: [],
    })
    ast = mutated
  }

  // If there are mutations, add a single empty Mutation type
  if (mutations.length === 0) {
    const mutated: any = cloneDeep(ast)
    mutated.definitions.push({
      kind: 'ObjectTypeDefinition',
      description: undefined,
      name: {kind: 'Name', value: 'Mutation'},
      interfaces: [],
      directives: [],
      fields: [],
    })
    ast = mutated
  }

  return ast
}
