import {clone, cloneDeep} from 'lodash'
import {parse, print, visit} from 'graphql'
import * as fs from 'fs-extra'
import * as glob from 'glob'
import * as os from 'os'
import * as path from 'path'
import * as prettier from 'prettier'

import dedupeQueryAndMutationTypes from '../utils/dedupe-query-and-mutation-types'

export default (
  source: string,
  output: string = path.join(os.tmpdir(), `stepzen-tmp-${Date.now()}`),
) => {
  // Ensure source and output directories exist
  if (!fs.existsSync(source))
    throw new Error(`Cannot find source directory ${source}`)
  fs.ensureDirSync(output)

  // Get a list of files.
  let ast: any
  let files: string[] = []

  // If there's an index.graphQL - get files argument in @sdl directive
  const sourceIndex = path.join(source, 'index.graphql')

  if (fs.existsSync(sourceIndex)) {
    const index = fs.readFileSync(sourceIndex, 'utf8')
    ast = parse(index)
    ast = visit(ast, {
      Directive(node) {
        if (node.name.value === 'sdl') {
          const list = node.arguments?.find(
            (arg: any) => arg.name.value === 'files',
          )
          // If we find a 'files' argument, we copy the list, and remove the argument
          if (list) {
            const copy: any = clone(list.value)
            for (const file of copy.values) {
              files = files.concat(file.value)
            }
            const mutated: any = cloneDeep(node)
            mutated.arguments = mutated.arguments.filter(
              (arg: any) => arg.name.value !== 'files',
            )
            return mutated
          }
        }
      },
    })
  } else {
    const content = glob
      .sync('**/*.graphql', {cwd: source})
      .map((file: string) => {
        const graphql = fs.readFileSync(`${source}/${file}`, 'utf8')
        return graphql
      })
    ast = parse(content.join(os.EOL))
  }

  // Strip @sdl directive
  ast = visit(ast, {
    Directive(node) {
      if (node.name.value === 'sdl') return null
    },
  })

  // Check all the files exist
  for (const file of files) {
    const find = path.join(source, file)
    if (!fs.existsSync(find)) {
      throw new Error(`Cannot find file ${find}`)
    }
  }

  // Get all the files and stitch
  const printed = print(ast)
  let stitched = `${printed}${os.EOL}`
  for (const file of files) {
    const find = path.join(source, file)
    const content = fs.readFileSync(find, 'utf8')
    stitched += `${content}${os.EOL}`
  }

  // Dedupe Query and Mutation types
  stitched = dedupeQueryAndMutationTypes(stitched)

  // Format
  stitched = prettier.format(stitched, {parser: 'graphql'})

  // Write to output folder
  const outputIndex = path.join(output, 'index.graphql')
  fs.writeFileSync(outputIndex, stitched)

  // Copy config if exists, too
  const sourceConfig = path.join(source, 'config.yaml')
  const outputConfig = path.join(output, 'config.yaml')

  if (fs.existsSync(sourceConfig)) {
    fs.copyFileSync(sourceConfig, outputConfig)
  }

  // Return output folder
  return output
}
