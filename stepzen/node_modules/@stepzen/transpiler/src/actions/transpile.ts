import {DocumentNode, parse} from 'graphql'
import * as dotenv from 'dotenv'
import * as fs from 'fs'
import * as glob from 'glob'
import * as path from 'path'

import print from '../actions/print'
import stitch from '../actions/stitch'
import configure from './configure'

import configMutations from '../mutations/config'

export default async (source: string) => {
  // Ensure source and output directories exist
  if (!fs.existsSync(source)) {
    throw new Error(`Cannot find source directory ${source}`)
  }

  // Load env vars, from working and source directories
  dotenv.config()
  dotenv.config({path: path.resolve(source, '.env')})

  // State of whether we've transpiled or not
  let transpiledConfig = false
  let transpiledGraphQL = false

  // See whether to transpile config
  let config: any = await configure(source, true)
  const configCopy = config

  if (config) {
    for await (const mutation of configMutations) {
      config = await mutation(config)
    }
  }

  if (configCopy !== config) {
    transpiledConfig = true
  }

  // See whether to transpile GraphQL
  const graphqlFiles = glob.sync('**/*.graphql', {cwd: source})
  let original: any = ''
  let mutated: any = ''

  if (graphqlFiles.length > 0) {
    const stitched = await stitch(source)

    const index = path.join(stitched, 'index.graphql')

    const graphql = fs.readFileSync(index, 'utf8')

    let ast: DocumentNode = parse(graphql)
    original = parse(graphql)

    // you can transpile schema ast here

    mutated = print(ast)

    if (print(original) !== mutated) {
      transpiledGraphQL = true
    }
  }

  return {
    config,
    schema: mutated,
    transpiled: transpiledConfig || transpiledGraphQL,
  }
}
