import * as debug from 'debug'
import * as fs from 'fs-extra'
import * as glob from 'glob'
import * as inquirer from 'inquirer'
import * as path from 'path'
import * as yaml from 'yaml'

export default async (source: string, silent = false, answers: any = {}) => {
  let config: any = {
    configurationset: [],
    ruleset: [],
  }

  // Now let's parse and add any config.yamls
  for (const y of glob.sync('**/config.yaml', {cwd: source})) {
    const filePath = path.join(source, y)

    const file = fs.readFileSync(filePath, 'utf8')
    const asYAML = yaml.parse(file)

    debug('stepzen:transpiler')(`Adding config.yaml ${filePath}`)
    debug('stepzen:transpiler')(`Contents: ${JSON.stringify(asYAML, null, 2)}`)

    if (asYAML.configurationset) {
      config.configurationset = config.configurationset.concat(
        asYAML.configurationset,
      )
    }

    if (asYAML.ruleset) {
      config.ruleset = config.ruleset.concat(asYAML.ruleset)
    }
  }

  // Now let's build configs from questions
  for await (const j of glob.sync('**/stepzen.config.json', {
    cwd: source,
  })) {
    const filePath = path.join(source, j)

    const file = fs.readFileSync(filePath, 'utf8')
    const asJSON = JSON.parse(file)

    debug('stepzen:transpiler')(`Adding stepzen.config.json ${filePath}`)
    debug('stepzen:transpiler')(`Contents: ${JSON.stringify(asJSON, null, 2)}`)

    if (asJSON.config?.questions) {
      for await (const question of asJSON.config?.questions) {
        const [name, key] = question.name.split('.')

        let answer: any = {}

        if (silent) {
          answer = {
            [name]: {[key]: answers[name]?.[key] ? answers[name]?.[key] : ''},
          }
        } else {
          answer = await inquirer.prompt({
            type: 'password',
            ...question,
          })
        }

        const configset = {
          configuration: {
            name,
            [key]: answer[name][key],
          },
        }

        debug('stepzen:transpiler')(
          `Question: ${JSON.stringify(question, null, 2)}`,
        )
        debug('stepzen:transpiler')(
          `Answer: ${JSON.stringify(configset, null, 2)}`,
        )

        config.configurationset.push({...configset})
      }
    }
  }

  debug('stepzen:transpiler')(
    `Configuration: ${JSON.stringify(config, null, 2)}`,
  )

  // OK now let's collate everything into shared configurations
  const obj: any = {}
  for (const c of config.configurationset) {
    const name = c.configuration.name
    if (!obj[name]) obj[name] = {}
    for (const [key, value] of Object.entries(c.configuration)) {
      if (key === name) continue
      obj[name][key] = value
    }
  }

  // Now convert back into StepZen format
  const structured: any = {
    configurationset: [],
    ruleset: [],
  }
  for (const configuration of Object.keys(obj)) {
    structured.configurationset.push({
      configuration: {...obj[configuration]},
    })
  }
  structured.ruleset = [...config.ruleset]

  // Return YAML, if appropriate
  if (structured.configurationset.length === 0)
    delete structured.configurationset
  if (structured.ruleset.length === 0) delete structured.ruleset

  if (structured.configurationset || structured.ruleset) {
    return yaml.stringify(structured)
  }

  return false
}
