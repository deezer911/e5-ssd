"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const dotenv = require("dotenv");
const fs = require("fs");
const glob = require("glob");
const path = require("path");
const print_1 = require("../actions/print");
const stitch_1 = require("../actions/stitch");
const configure_1 = require("./configure");
const config_1 = require("../mutations/config");
exports.default = async (source) => {
    var e_1, _a;
    // Ensure source and output directories exist
    if (!fs.existsSync(source)) {
        throw new Error(`Cannot find source directory ${source}`);
    }
    // Load env vars, from working and source directories
    dotenv.config();
    dotenv.config({ path: path.resolve(source, '.env') });
    // State of whether we've transpiled or not
    let transpiledConfig = false;
    let transpiledGraphQL = false;
    // See whether to transpile config
    let config = await configure_1.default(source, true);
    const configCopy = config;
    if (config) {
        try {
            for (var configMutations_1 = tslib_1.__asyncValues(config_1.default), configMutations_1_1; configMutations_1_1 = await configMutations_1.next(), !configMutations_1_1.done;) {
                const mutation = configMutations_1_1.value;
                config = await mutation(config);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configMutations_1_1 && !configMutations_1_1.done && (_a = configMutations_1.return)) await _a.call(configMutations_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    if (configCopy !== config) {
        transpiledConfig = true;
    }
    // See whether to transpile GraphQL
    const graphqlFiles = glob.sync('**/*.graphql', { cwd: source });
    let original = '';
    let mutated = '';
    if (graphqlFiles.length > 0) {
        const stitched = await stitch_1.default(source);
        const index = path.join(stitched, 'index.graphql');
        const graphql = fs.readFileSync(index, 'utf8');
        let ast = graphql_1.parse(graphql);
        original = graphql_1.parse(graphql);
        // you can transpile schema ast here
        mutated = print_1.default(ast);
        if (print_1.default(original) !== mutated) {
            transpiledGraphQL = true;
        }
    }
    return {
        config,
        schema: mutated,
        transpiled: transpiledConfig || transpiledGraphQL,
    };
};
//# sourceMappingURL=transpile.js.map