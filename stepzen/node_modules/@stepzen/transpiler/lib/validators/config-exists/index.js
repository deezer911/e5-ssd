"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const lodash_1 = require("lodash");
const fs = require("fs");
const path = require("path");
const yaml = require("yaml");
const STEPZEN_DEFAULTS = [
    'fedex_default',
    'holidayapi_default',
    'ipapi_default',
    'owm_default',
    'ups_default',
];
exports.default = (ast, source) => {
    var _a;
    let configs = [];
    graphql_1.visit(ast, {
        Argument(node) {
            var _a, _b;
            const name = (_a = node.name) === null || _a === void 0 ? void 0 : _a.value;
            const value = (_b = node.value) === null || _b === void 0 ? void 0 : _b.value;
            if (name === 'configuration') {
                configs = configs.concat(value);
            }
        },
    });
    configs = lodash_1.uniq(configs);
    configs = lodash_1.filter(configs, config => !STEPZEN_DEFAULTS.includes(config));
    if (configs.length > 0) {
        const sourceConfig = path.join(source, 'config.yaml');
        if (!fs.existsSync(sourceConfig)) {
            throw new Error('No config.yaml found');
        }
        const content = fs.readFileSync(sourceConfig, 'utf8');
        const asYaml = yaml.parse(content);
        for (const config of configs) {
            const found = (_a = asYaml === null || asYaml === void 0 ? void 0 : asYaml.configurationset) === null || _a === void 0 ? void 0 : _a.find((c) => {
                var _a;
                return ((_a = c === null || c === void 0 ? void 0 : c.configuration) === null || _a === void 0 ? void 0 : _a.name) === config;
            });
            if (!found) {
                throw new Error(`Could not find configuration item for "${config}"`);
            }
        }
    }
    return true;
};
//# sourceMappingURL=index.js.map