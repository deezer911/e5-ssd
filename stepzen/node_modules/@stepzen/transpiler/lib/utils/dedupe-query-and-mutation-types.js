"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const graphql_helpers_1 = require("../utils/graphql-helpers");
exports.default = (schema) => {
    let ast = graphql_1.parse(schema);
    let queries = [];
    let mutations = [];
    // Loop through the AST and find Query and Mutation types.
    // Store their fields.
    // Return null to remove it from the tree
    ast = graphql_1.visit(ast, {
        ObjectTypeDefinition: {
            enter(node) {
                if (node.name.kind === 'Name' && node.name.value === 'Query') {
                    queries = queries.concat(node.fields);
                    return null;
                }
                if (node.name.kind === 'Name' && node.name.value === 'Mutation') {
                    mutations = mutations.concat(node.fields);
                    return null;
                }
            },
        },
    });
    // This is the template for the new Query type
    const queryTemplate = {
        kind: 'ObjectTypeDefinition',
        description: undefined,
        name: { kind: 'Name', value: 'Query' },
        interfaces: [],
        directives: [],
        fields: [],
    };
    // This is the template for the new Mutation type
    const mutationTemplate = {
        kind: 'ObjectTypeDefinition',
        description: undefined,
        name: { kind: 'Name', value: 'Mutation' },
        interfaces: [],
        directives: [],
        fields: [],
    };
    // If there are queries, add a single Query type
    // with all the concatenated queries
    if (queries.length > 0) {
        const mutated = graphql_helpers_1.cloneDeep(ast);
        const query = Object.assign(Object.assign({}, queryTemplate), { fields: queries });
        mutated.definitions.push(query);
        ast = mutated;
    }
    // If there are mutations, add a single Query type
    // with all the concatenated mutations
    if (mutations.length > 0) {
        const mutated = graphql_helpers_1.cloneDeep(ast);
        const query = Object.assign(Object.assign({}, mutationTemplate), { fields: mutations });
        mutated.definitions.push(query);
        ast = mutated;
    }
    return graphql_1.print(ast);
};
//# sourceMappingURL=dedupe-query-and-mutation-types.js.map