export interface StepZenAccount {
    account: string;
    adminkey: string;
    /**
     * ZenCtl base URL, e.g. `https://fakefish.stepzen.io` for production,
     * or `http://localhost` for local tests.
     *
     * Determined by taking the first option that is defined:
     *  - the `server` config property explicily passed into the `init()` function
     *  - the `STEPZEN_SERVER_URL` environment variable
     *  - the `https://{account}.stepzen.io` default value
     *
     * The `{account}` placeholder (if present) is replaced by the provided account
     * name
     */
    server: string;
    /**
     * ZenCtl domain, e.g. `stepzen.io`. This is only relevant for local testing
     * when ZenCtl is running on localhost. In that case an additional `Host` HTTP
     * header is added to requests, using a non-localhost host name constructed
     * from this property.
     *
     * Determined by taking the first option that is defined:
     *  - the `domain` config property explicily passed into the `init()` function
     *  - the `STEPZEN_DOMAIN` environment variable
     *  - the `stepzen.io` default value
     */
    domain: string;
}
export interface StepZenDeploy {
    configurationsets?: string[];
    destination: string;
    schema: string;
}
export interface StepZenList {
    type: string;
}
export interface StepZenUpload {
    destination: string;
    directory?: string;
    file?: string;
    type: string;
}
export interface ZenCtlRequestHeaders {
    authorization: string;
    host: string;
    'stepzen-cli-version': string;
    'user-agent': string;
}
export interface ZenCtlResponse {
    errors?: Array<string>;
    message?: string;
    results?: Array<string>;
    success: boolean;
}
export interface SDKConfiguration {
    /**
     * The name and version of that app that uses the SDK,
     * e.g. `stepzen-cli/0.9.32`
     *
     * It is appended to the user-agent string in all requests made to StepZen
     * through the SDK and becomes availabe in the log analytics.
     */
    appName: string;
}
