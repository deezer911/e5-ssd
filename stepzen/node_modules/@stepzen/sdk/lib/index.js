"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const account_1 = require("./commands/account");
const authenticate_1 = require("./commands/authenticate");
const deploy_1 = require("./commands/deploy");
const list_1 = require("./commands/list");
const upload_1 = require("./commands/upload");
tslib_1.__exportStar(require("./shared/types"), exports);
const init = (sdkConfig) => {
    const defaults = {
        domain: process.env.STEPZEN_DOMAIN || 'stepzen.io',
        server: process.env.STEPZEN_SERVER_URL || 'https://{account}.stepzen.io',
    };
    return {
        verify: (account, adminkey) => {
            return authenticate_1.default({
                account,
                adminkey,
                server: defaults.server.replace('{account}', account),
                domain: defaults.domain,
            }, sdkConfig);
        },
        client: async (options) => {
            if (!options.account) {
                throw new Error('You must provide an account.');
            }
            if (!options.adminkey) {
                throw new Error('You must provide an admin key.');
            }
            const account = Object.assign(Object.assign({}, defaults), options);
            account.server = account.server.replace('{account}', options.account);
            const authorised = await authenticate_1.default(account, sdkConfig);
            if (!authorised) {
                throw new Error('Your credentials are invalid.');
            }
            return {
                account: () => {
                    return account_1.default(account, sdkConfig);
                },
                deploy: (destination, properties) => {
                    return deploy_1.default(Object.assign({ destination }, properties), account, sdkConfig);
                },
                list: {
                    configurationsets: async () => {
                        return list_1.default({ type: 'configurationsets' }, account, sdkConfig);
                    },
                    schemas: async () => {
                        return list_1.default({ type: 'schemas' }, account, sdkConfig);
                    },
                },
                upload: {
                    configurationset: async (destination, file) => {
                        return upload_1.default({ type: 'configurationset', destination, file }, account, sdkConfig);
                    },
                    schema: async (destination, directory) => {
                        return upload_1.default({ type: 'schema', destination, directory }, account, sdkConfig);
                    },
                },
            };
        },
    };
};
exports.init = init;
/**
 * The default SDK instance that does not know the name of the app using the SDK.
 * It tries to guess the app name from `process.argv`
 *
 * @deprecated use the init({appName: 'my-app/1.2.3'}) method to initialis an SDK instance
 */
const stepzen = exports.init({
    // For legacy apps use the script name (e.g. `index.js` as the app name)
    // Fallback to `node` if this file is imported into an interactive node shell
    appName: path.basename(process.argv[1] || process.argv[0]),
});
exports.default = stepzen;
// Hack: support both ESM-style imports: `import stepzen from '@stepzen/sdk'`
// and keep the backwards-compat with CJS-style imports: `const stepzen = require('@stepzen/sdk')`
// NOTE: if at any point in the future there is a name collision between `stepzen` and ES exports
// this hack will break
module.exports = Object.assign(Object.assign({}, module.exports), stepzen);
//# sourceMappingURL=index.js.map