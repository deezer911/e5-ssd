"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
const node_fetch_1 = require("node-fetch");
const constants_1 = require("../shared/constants");
const payloads_1 = require("../shared/payloads");
const request_1 = require("../shared/request");
const transpiling_1 = require("../shared/transpiling");
const validation_1 = require("../shared/validation");
exports.default = async (details, account, sdkConfig) => {
    const headers = request_1.getRequestHeaders(account, sdkConfig);
    let payload;
    switch (details.type) {
        case 'configurationset':
            await validation_1.validateConfigurationset(details.file);
            const transpiled = await transpiling_1.transpileConfigurationset(details.file);
            debug('stepzen:transpiler')(transpiled);
            if (transpiled) {
                payload = await payloads_1.generateYamlPayload(transpiled);
            }
            else {
                payload = await payloads_1.generateYamlPayload(details.file);
            }
            break;
        case 'schema':
            await validation_1.validateSchema(details.directory);
            payload = await payloads_1.generateZipPayload(details.directory, {
                destination: details.destination,
                stitcherName: 'index.graphql',
            }, [/.*\.graphql$/i]);
            break;
    }
    debug('stepzen:headers')(headers);
    debug('stepzen:payload')(payload);
    const response = await node_fetch_1.default(`${account.server}${constants_1.ADMIN_UPLOAD_URL}/${details.type}/${details.destination}`, {
        body: payload,
        headers: headers,
        method: 'POST',
    });
    debug('stepzen:response')(response);
    if (response.status >= 400 && response.status < 500) {
        return {
            message: 'Could not complete the request. Please check your authentication details are correct.',
            success: false,
        };
    }
    if (response.status >= 500) {
        return {
            errors: ['Internal Server Error'],
            message: response.statusText,
            success: false,
        };
    }
    const text = await response.text();
    let json;
    try {
        json = JSON.parse(text);
    }
    catch (_a) {
        return {
            errors: [`An unexpected error occurred.\n\n${text}`],
            message: `An unexpected error occurred.\n\n${text}`,
            success: false,
        };
    }
    return json;
};
//# sourceMappingURL=upload.js.map